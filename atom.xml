<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>skinsboy’s FM blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-17T15:03:27.296Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>skinsboy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python中的property</title>
    <link href="http://yoursite.com/2018/01/14/Python%E4%B8%AD%E7%9A%84property/"/>
    <id>http://yoursite.com/2018/01/14/Python中的property/</id>
    <published>2018-01-14T12:42:50.000Z</published>
    <updated>2018-01-17T15:03:27.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h2><h4 id="property属性之一"><a href="#property属性之一" class="headerlink" title="@property属性之一"></a>@property属性之一</h4><p>@property是属性函数的意思，它可以将一个类方法转变成一个类属性。例子如下：</p>
<pre><code>class Person(object):
    def __init__(self,first_name,last_name):
        self.first_name=first_name
        self.last_name=last_name
    @property
    def full_name(self):
    return &quot;%s %s&quot;%(self.first_name,self.last_name)
</code></pre><p>我们创建了一个full_name方法，它有一个@property装饰器。可以使用person.full_name访问，但是不能将该属性设为其他值，会引发一个AttributeError错误，改变full_name属性唯一方法是：<code>person.first_name=&quot;Dan&quot;</code></p>
<h4 id="property属性之二"><a href="#property属性之二" class="headerlink" title="@property属性之二"></a>@property属性之二</h4><p>使用property取代setter和getter方法，让我们假设有一些遗留代码，她们是由一些对Python理解不够好的人写的。</p>
<pre><code>from decimal import Decimal
class fees(object):
    def __init__(self):
        self._fee=None
    def get_fee(self):
        return self._fee
    def set_fee(self,value):
        if isinstance(value,str):
            self._fee=Decimal(value)
        elif isinstance(value,Decimal):
            self._fee=value
</code></pre><p>要使用这个类，我们必须要使用定义的getter和setter方法：</p>
<pre><code>&gt;&gt;&gt;f=Fees()
&gt;&gt;&gt;f.set_fee(&quot;1&quot;)
&gt;&gt;&gt;f.get_fee()
Decimal(&apos;1&apos;)
</code></pre><p>如果你想添加可以使用正常点符号访问的属性，而不破坏所有依赖于这段代码的应用程序，你可以通过添加一个属性函数非常简单地改变它：</p>
<pre><code>from decimal import Decimal
class fees(object):
    def __init__(self):
        self._fee=None
    def get_fee(self):
        return self._fee
    def set_fee(self,value):
        if isinstance(value,str):
            self._fee=Decimal(value)
        elif isinstance(value,Decimal):
            self._fee=value
    fee=property(get_fee,set_fee)
</code></pre><p>在这段代码的末尾添加了一行，现在可以这样做：</p>
<pre><code>&gt;&gt;&gt;f=Fees()
&gt;&gt;&gt;f.set_fee(&quot;1&quot;)
&gt;&gt;&gt;f.fee
Decimal(&apos;1&apos;)
&gt;&gt;&gt;f.fee=&quot;2&quot;
&gt;&gt;&gt;f.get_fee()
Decimal(&apos;2&apos;) 
</code></pre><p>正如你所看到的，当我们以这种方式使用属性函数时，它允许fee属性设置并获取值本身而不破坏原有代码。让我们使用属性装饰器来重写这段代码，看看我们是否能得到一个允许设置的属性值。</p>
<pre><code>from decimal import Decimal
class fees(object):
    def __init__(self):
        self._fee=None
    @property
    def fee(self): &quot;&quot;the fee property - the getter&quot;&quot;
        return self._fee
    @fee.setter
    def fee(self,value): &quot;&quot;the setter of the fee property&quot;&quot;
        if isinstance(value,str):
            self._fee=Decimal(value)
        elif isinstance(value,Decimal):
            self._fee=value
if __name__==&quot;__main__&quot;:
    f=Fees()
</code></pre><p>上面代码演示了如何为fee属性创建一个setter方法。可以用一个名为@fee.setter的装饰器装饰第二个方法名也为fee的方法来实现这个。当你如下所做是，setter被调用：</p>
<pre><code>&gt;&gt;&gt;f=Fees()
&gt;&gt;&gt;f.fee=&quot;1&quot;
</code></pre><p>如果你看属性函数的说明，他有fget,fset,fdel和doc几个参数。如果你想对属性使用del命令，你可以使用@fee.deleter创建另一个装饰器来装饰相通名字的函数从而实现删除的同样效果。</p>
<h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><hr>
<p>Python用下划线作为变量前缀和后缀指定特殊变量。</p>
<p>1、<code>_XXX</code>代表不能直接访问的类属性，只有类对象和子类对象自己能访问     到这些变量，需通过提供的接口进行访问；<br>2、<code>__XXX</code>代表类的私有成员，只有类对象自己能访问，连子类对象也不能访问到这个数据；<br>3、<code>__XXX__</code>代表Python里特殊方法专用的标识。</p>
<pre><code>class A(object):
    def __init__(self):
        self.__private()
        self.public()
    def __private(self):
        print(&quot;A.__private()&quot;)
    def public(self):
        print(&quot;A.public()&quot;)

class B(A):
    def __private(self):
        print(&quot;B.__private()&quot;)
    def public(self):
        print(&quot;B.public()&quot;)

b=B()
答案：
A.__private()
B.public()
</code></pre><p>我们可以把代码分为三个代码块：类A的定义、类B的定义和变量b的定义。根据类定义，我们知道代码给类A定义了三个成员变量，类B定义了两个成员变量，可以通过dir(A)和dir(B)验证：</p>
<pre><code>class
&gt;&gt;&gt; dir(A)
[&apos;_A__private&apos;,&apos;__class__&apos;,&apos;__delattr__&apos;,&apos;__dict__&apos;, &apos;__dir__&apos;,&apos;__doc__&apos;,&apos;__eq__&apos;,&apos;__format__&apos;,&apos;__ge__&apos;,&apos;__getattribute__&apos;,&apos;__gt__&apos;,&apos;__hash__&apos;,&apos;__init__&apos;,&apos;__le__&apos;,&apos;__lt__&apos;,&apos;__module__&apos;,&apos;__ne__&apos;,&apos;__new__&apos;,&apos;__reduce__&apos;,&apos;__reduce_ex__&apos;,&apos;__repr__&apos;&apos;__setattr__&apos;,&apos;__sizeof__&apos;,&apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;__weakref__&apos;, &apos;public&apos;]
&gt;&gt;&gt; dir(B)
[&apos;_A__private&apos;,&apos;_B__private&apos;,&apos;__class__&apos;,&apos;__delattr__&apos;,&apos;__dict__&apos;,&apos;__dir__&apos;,&apos;__doc__&apos;,&apos;__eq__&apos;,&apos;__format__&apos;,&apos;__ge__&apos;,&apos;__getattribute__&apos;,&apos;__gt__&apos;,&apos;__hash__&apos;,&apos;__init__&apos;,&apos;__le__&apos;,&apos;__lt__&apos;,&apos;__module__&apos;,&apos;__ne__&apos;,&apos;__new__&apos;,&apos;__reduce__&apos;,&apos;__reduce_ex__&apos;,&apos;__repr__&apos;,&apos;__setattr__&apos;,&apos;__sizeof__&apos;,&apos;__str__&apos;,&apos;__subclasshook__&apos;,&apos;__weakref__&apos;, &apos;public&apos;]
</code></pre><p>也就是说私有变量<strong>foo经过mangle成为_ClassName_foo后继承给了子类。这就是所谓的私有变量轧压（Private name mangling）。如类A里的</strong>private标识符将被转换为_A__private。因为类A定义了一个私有成员函数（变量），所以在代码生成之前先执行私有变量轧压。轧压之后，类A的代码就变成：</p>
<pre><code>class A(object):
    def __init__(self):&quot;&quot;__init__表示在创建实例的时候，实例会自动调用这个方法，一般用来对实例的属性进行初始化&quot;&quot;
        self._A__private()
        self.public()
    def _A__private(self):
        print(&quot;A.__private()&quot;)
    def public(self):
        print(&quot;A.public()&quot;)
</code></pre><p>因为在类B定义的时候没有覆盖<strong>init</strong>方法，所以调用的仍然是A.<strong>init</strong>，即执行了self._A<strong>private(),自然输出A.</strong>private()了。<br>下面代码可以增强说服力，增进理解：</p>
<pre><code>class C(A):
    def __init__(self):&quot;&quot;重写__init__，不再调用self._A__private&quot;&quot;
        self.__private()
        self.public()
    def __private(self):
        print(&quot;C.__private()&quot;)
    def public(self):
        print(&quot;C.public()&quot;) 

&gt;&gt;&gt;c=C()
C.__private()
C.public()   
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;property&quot;&gt;&lt;a href=&quot;#property&quot; class=&quot;headerlink&quot; title=&quot;@property&quot;&gt;&lt;/a&gt;@property&lt;/h2&gt;&lt;h4 id=&quot;property属性之一&quot;&gt;&lt;a href=&quot;#property属性之一&quot; c
    
    </summary>
    
      <category term="computer" scheme="http://yoursite.com/categories/computer/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>learning google news 17.06.01</title>
    <link href="http://yoursite.com/2017/06/01/learning%20google%20news-07.06.01/"/>
    <id>http://yoursite.com/2017/06/01/learning google news-07.06.01/</id>
    <published>2017-06-01T02:55:56.000Z</published>
    <updated>2017-06-01T03:46:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生词list"><a href="#生词list" class="headerlink" title="生词list"></a>生词list</h1><h5 id="The-Energy-202-We-may-be-saying-au-revoir-to-Paris-climate-accord"><a href="#The-Energy-202-We-may-be-saying-au-revoir-to-Paris-climate-accord" class="headerlink" title="The Energy 202:We may be saying au revoir to Paris climate accord"></a>The Energy 202:We may be saying au revoir to Paris climate accord</h5><p>au revoir, accord, interpretation, anticipate, rundown</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;生词list&quot;&gt;&lt;a href=&quot;#生词list&quot; class=&quot;headerlink&quot; title=&quot;生词list&quot;&gt;&lt;/a&gt;生词list&lt;/h1&gt;&lt;h5 id=&quot;The-Energy-202-We-may-be-saying-au-revoir-to-Pari
    
    </summary>
    
      <category term="English" scheme="http://yoursite.com/categories/English/"/>
    
    
      <category term="vocabulary" scheme="http://yoursite.com/tags/vocabulary/"/>
    
  </entry>
  
  <entry>
    <title>学习《UNIX&amp;LINUX大学教程》第一、二、三章</title>
    <link href="http://yoursite.com/2017/05/04/%E5%AD%A6%E4%B9%A0%E3%80%8AUNIX&amp;LINUX%E5%A4%A7%E5%AD%A6%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%AC%E4%B8%80%E3%80%81%E4%BA%8C%E3%80%81%E4%B8%89%E7%AB%A0/"/>
    <id>http://yoursite.com/2017/05/04/学习《UNIX&amp;LINUX大学教程》第一、二、三章/</id>
    <published>2017-05-04T14:14:58.000Z</published>
    <updated>2017-05-09T00:04:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>1、读取并解释所输入命令的程序称为“shell”，本书中使用的shell是“Bash”，shell就是“围绕”在内核周围的一种特殊类型程序（命令处理器）的名称，他充当我们与系统交互的个人界面。——page5</p>
<p>2、Unix最初由Ken Thompson于1969年在贝尔实验室开发，目的是运行他开发的游戏Space Travel。</p>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>1、“引导（booting）”是bootstrapping的简写，表示一个古老的谚语“通过自力更生出人头地”。——page9<br>2、操作系统内核提供的基本服务：——page10</p>
<ul>
<li>内存管理</li>
<li>进程管理</li>
<li>进程间通信</li>
<li>输入/输出</li>
<li>文件管理</li>
<li>安全和访问控制</li>
<li>网络访问</li>
</ul>
<p>3、除内核外，最重要的程序是shell和GUI（graphical user interface，图形用户界面）。Unix=Unix内核+Unix实用工具。——page11</p>
<p>4、最常见的Linux引导加载程序是GRUB（Grand Unified Bootloader）和LILO（Linux Loader）。GRUB是GNU的一部分，LILO是Linux发行版的一部分。——page29</p>
<p>5、Unix是一种多用户、多任务处理的操作系统，它由一个类Unix内核、许多类Unix实用工具及一个类Unix shell构成。Linux是任何使用Linux内核的Unix的名称。——page31</p>
<p>6、Unix是一组为聪明人准备的工具。——page31</p>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>1、用Unix术语讲，称界面b终端（terminal），而将其他部件总成为主机（host）。</p>
<p>2、计算机=终端+主机  终端=输入设施+输出设施</p>
<p>3、多用户操作系统是指能够同时支持多人使用的系统。</p>
<p>4、为了连接一台远程主机并仿真一个字符终端，使用ssh（secure shell）命令，为了仿真一个X Window图形终端，可以使用ssh -x命令。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;p&gt;1、读取并解释所输入命令的程序称为“shell”，本书中使用的shell是“Bash”，shell就是“围绕”在内核周围的一种特殊类
    
    </summary>
    
      <category term="computer" scheme="http://yoursite.com/categories/computer/"/>
    
    
      <category term="unix" scheme="http://yoursite.com/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>学习《UNIX&amp;LINUX大学教程》第四、五、六章</title>
    <link href="http://yoursite.com/2017/05/04/%E5%AD%A6%E4%B9%A0%E3%80%8AUNIX&amp;LINUX%E5%A4%A7%E5%AD%A6%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
    <id>http://yoursite.com/2017/05/04/学习《UNIX&amp;LINUX大学教程》第四章/</id>
    <published>2017-05-04T14:14:58.000Z</published>
    <updated>2017-05-10T07:46:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p>1、在Unix世界中，有许多不同类型的shell，目前流行的shell是Bash、Csh、Ksh、Zsh。对于Bash和Ksh来说，提示是一个美元符号：$。对于Csh来说，提示是一个百分比符号：%。——page55</p>
<p>2、修改密码命令：passwd，列举文件命令：ls，复制文件命令：cp，显示进程状态命令：ps。——page59</p>
<p>3、黑客：那些花费时间在有用（或者至少无害）的编程项目上的人。因此，术语“黑客”通常有正面的含义，描述那些像书呆子一样不停专研的人。此外，“黑客”也指那些知道如何使用计算机创造性地解决问题的聪明人。</p>
<p>4、骇客：坏家伙，以破坏计算机系统以及做专家不希望他做的事情为乐趣的人。</p>
<p>5、移除命令：rm。</p>
<p>6、当以超级用户登录时，提示都将改变成字符#。</p>
<h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><p>1、Unix GUI的抽象层次：硬件-内核中的设备驱动程序-X Window-窗口管理器-桌面环境-应用程序/用户。</p>
<p>2、20实际90年代，X Window窗口管理器主流：mwm（OSF组织）、olwm（UI组织）和twm（MIT）。</p>
<p>3、Linux的GUI：KDE（Kool Desktop Environment）和Gnome（GNU Network Object Model Environment）。</p>
<p>4、Gnome的窗口管理器是Metacity，KDE的窗口管理器是kwm。</p>
<p>5、Gnome用户倾向于简单和条理。他们希望事情有逻辑。如果需要，她们愿意尽最大的努力使事情以一种对他们有意义的方式运行。Gnome用户赞同下述格言：“Form ever follows function（形式永远追随功能）”。KDE用户认为这个世界是一个充满色彩、变化，而且有时还充满迷惑的场所。他们倾向于让生活顺其自然，而不是花费大量的时间来修复小的细节。他们倾向于使事情更好看，动作更漂亮。Gnome用户喜欢控制事情如何运转，KDE用户喜欢控制事情的外观。</p>
<h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><p>1、</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第四章&quot;&gt;&lt;a href=&quot;#第四章&quot; class=&quot;headerlink&quot; title=&quot;第四章&quot;&gt;&lt;/a&gt;第四章&lt;/h2&gt;&lt;p&gt;1、在Unix世界中，有许多不同类型的shell，目前流行的shell是Bash、Csh、Ksh、Zsh。对于Bash和Ksh来说，
    
    </summary>
    
      <category term="computer" scheme="http://yoursite.com/categories/computer/"/>
    
    
      <category term="unix" scheme="http://yoursite.com/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>YSW-chapter 4.3</title>
    <link href="http://yoursite.com/2017/05/03/YSW-chapter-4-3/"/>
    <id>http://yoursite.com/2017/05/03/YSW-chapter-4-3/</id>
    <published>2017-05-03T00:01:56.000Z</published>
    <updated>2018-01-14T12:34:04.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="错词list"><a href="#错词list" class="headerlink" title="错词list"></a>错词list</h1><h5 id="one-time"><a href="#one-time" class="headerlink" title="one time"></a>one time</h5><p>adequate, applied, attentive, barren, commonsense, detailed, disabled, exstensive</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;错词list&quot;&gt;&lt;a href=&quot;#错词list&quot; class=&quot;headerlink&quot; title=&quot;错词list&quot;&gt;&lt;/a&gt;错词list&lt;/h1&gt;&lt;h5 id=&quot;one-time&quot;&gt;&lt;a href=&quot;#one-time&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="English" scheme="http://yoursite.com/categories/English/"/>
    
    
      <category term="vocabulary" scheme="http://yoursite.com/tags/vocabulary/"/>
    
  </entry>
  
  <entry>
    <title>YSW-chapter 4.2</title>
    <link href="http://yoursite.com/2017/04/18/YSW-chapter-4-2/"/>
    <id>http://yoursite.com/2017/04/18/YSW-chapter-4-2/</id>
    <published>2017-04-18T14:27:56.000Z</published>
    <updated>2018-01-14T12:33:39.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="错词list"><a href="#错词list" class="headerlink" title="错词list"></a>错词list</h1><h5 id="one-time"><a href="#one-time" class="headerlink" title="one time"></a>one time</h5><p>punctual, enthusiastic, influential, aggressive, compulsory, contributory, packaging, athletic, administrative, prolific, occasional, durable, permanent, implement, permanently, electronically</p>
<h5 id="two-time"><a href="#two-time" class="headerlink" title="two time"></a>two time</h5><p>punctual, beneficial, compulsory, athletic, cautious, agricultural, occasional, permanent, implement, permanently</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;错词list&quot;&gt;&lt;a href=&quot;#错词list&quot; class=&quot;headerlink&quot; title=&quot;错词list&quot;&gt;&lt;/a&gt;错词list&lt;/h1&gt;&lt;h5 id=&quot;one-time&quot;&gt;&lt;a href=&quot;#one-time&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="English" scheme="http://yoursite.com/categories/English/"/>
    
    
      <category term="vocabulary" scheme="http://yoursite.com/tags/vocabulary/"/>
    
  </entry>
  
  <entry>
    <title>dream begin with self-discipline</title>
    <link href="http://yoursite.com/2017/04/12/dream-begin-with-self-discipline/"/>
    <id>http://yoursite.com/2017/04/12/dream-begin-with-self-discipline/</id>
    <published>2017-04-12T02:18:16.000Z</published>
    <updated>2017-04-15T01:29:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017-4-15-2017-12-30共255天的短期目标："><a href="#2017-4-15-2017-12-30共255天的短期目标：" class="headerlink" title="2017.4.15~2017.12.30共255天的短期目标："></a>2017.4.15~2017.12.30共255天的短期目标：</h2><p>1、照顾YY</p>
<p>2、学会奇迹的山+另一支岸部真明的曲子</p>
<p>3、完成雅思王听力</p>
<p>4、学习linux</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2017-4-15-2017-12-30共255天的短期目标：&quot;&gt;&lt;a href=&quot;#2017-4-15-2017-12-30共255天的短期目标：&quot; class=&quot;headerlink&quot; title=&quot;2017.4.15~2017.12.30共255天的短期目标
    
    </summary>
    
      <category term="Life" scheme="http://yoursite.com/categories/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>terminal can fly with socks</title>
    <link href="http://yoursite.com/2017/04/07/terminal-can-fly-with-socks/"/>
    <id>http://yoursite.com/2017/04/07/terminal-can-fly-with-socks/</id>
    <published>2017-04-07T02:56:14.000Z</published>
    <updated>2017-04-07T06:19:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>terminal不支持socks协议，无法通过SS科学上网</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>在terminal中输入以下命令就可以了，其中<code>socks5://127.0.0.1:1080</code>为ss的本地代理地址。</p>
<pre><code>export ALL_PROXY=socks5://127.0.0.1:1080
</code></pre><p>若要清楚代理，输入以下命令：</p>
<pre><code>unset ALL_PROXY
</code></pre><h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><p>为了方便，可以在.bash_profile中加上以下内容：</p>
<pre><code>function setproxy() {
  export ALL_PROXY=socks5://127.0.0.1:1080
}
function unsetproxy() {
  unset ALL_PROXY
}
</code></pre><p>需要使用代理的时候<code>$setproxy</code>，不用了就<code>$unsetproxy</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;terminal不支持socks协议，无法通过SS科学上网&lt;/p&gt;
&lt;h1 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;hea
    
    </summary>
    
      <category term="computer" scheme="http://yoursite.com/categories/computer/"/>
    
    
      <category term="shadowsocks" scheme="http://yoursite.com/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>YSW-chapter3</title>
    <link href="http://yoursite.com/2017/04/07/YSW-chapter3/"/>
    <id>http://yoursite.com/2017/04/07/YSW-chapter3/</id>
    <published>2017-04-07T00:24:50.000Z</published>
    <updated>2017-05-03T00:08:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="错词list"><a href="#错词list" class="headerlink" title="错词list"></a>错词list</h1><h5 id="one-time"><a href="#one-time" class="headerlink" title="one time"></a>one time</h5><p>admission, cutlery, foyer, ointment, parcel, precision, preference, prescription, psychiatrist, psychologist, recipe, respondent, revision, scheme, syndicate, syrup ,steam, trailer, tribe</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;错词list&quot;&gt;&lt;a href=&quot;#错词list&quot; class=&quot;headerlink&quot; title=&quot;错词list&quot;&gt;&lt;/a&gt;错词list&lt;/h1&gt;&lt;h5 id=&quot;one-time&quot;&gt;&lt;a href=&quot;#one-time&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="English" scheme="http://yoursite.com/categories/English/"/>
    
    
      <category term="vocabulary" scheme="http://yoursite.com/tags/vocabulary/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/04/03/hello-world/"/>
    <id>http://yoursite.com/2017/04/03/hello-world/</id>
    <published>2017-04-03T12:35:41.000Z</published>
    <updated>2017-04-03T12:35:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
